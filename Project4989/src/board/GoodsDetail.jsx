import axios from 'axios';
import React, { useEffect, useState, useContext, useRef } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import ReportModal from './ReportModal';
import DetailChat from '../chat/DetailChat';
import { AuthContext } from '../context/AuthContext'; // AuthContext import Ï∂îÍ∞Ä
import BuyerSelectionModal from '../components/BuyerSelectionModal';
import ReviewModal from '../components/ReviewModal';
import './gooddetail.css';

const GoodsDetail = () => {
  // AuthContextÏóêÏÑú userInfoÎ•º Í∞ÄÏ†∏ÏôÄ Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.
  const { userInfo } = useContext(AuthContext);
  // const token = userInfo?.token; // userInfoÍ∞Ä ÏûàÏúºÎ©¥ ÌÜ†ÌÅ∞ÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.

  const token =
    userInfo?.token ??
    localStorage.getItem("jwtToken");

  const [open, setOpen] = useState(false);
  const [reportReason, setReportReason] = useState('');
  const [submitting, setSubmitting] = useState(false);
  const [showChat, setShowChat] = useState(false);
  const [chatRoom, setChatRoom] = useState(null); // üí° chatRoom ÏÉÅÌÉú Ï∂îÍ∞Ä

  const location = useLocation();
  const { search } = location;
  const query = new URLSearchParams(search);
  const postId = query.get("postId");

  const [post, setPost] = useState(null);
  const [goods, setGoods] = useState(null);
  const [cars, setCars] = useState(null);
  const [estate, setEstate] = useState(null);
  const [photos, setPhotos] = useState(null);

  const [count, setCount] = useState(0);
  const [favorited, setFavorited] = useState(false);
  const [currentPhotoIndex, setCurrentPhotoIndex] = useState(0);

  const [reportType, setReportType] = useState(''); // '', 'POST', 'MEMBER'
  const [targetId, setTargetId] = useState(null);
  const authorId = post?.memberId;


  const navi = useNavigate();


  // ÏÉÅÎã® state Î™®Ïùå Í∑ºÏ≤òÏóê Ï∂îÍ∞Ä
  const [deleting, setDeleting] = useState(false); // ‚úÖ ÏÇ≠Ï†ú ÏßÑÌñâ ÏÉÅÌÉú
  const [isUpdatingStatus, setIsUpdatingStatus] = useState(false); // ‚úÖ ÌåêÎß§ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏßÑÌñâ ÏÉÅÌÉú
  const [showBuyerModal, setShowBuyerModal] = useState(false); // ‚úÖ Í±∞ÎûòÏûê ÏÑ†ÌÉù Î™®Îã¨ ÏÉÅÌÉú
  
  // ÌõÑÍ∏∞ Í¥ÄÎ†® ÏÉÅÌÉú
  const [showReviewModal, setShowReviewModal] = useState(false);
  // const [selectedBuyerId, setSelectedBuyerId] = useState(null); // Ï†úÍ±∞
  const [hasReview, setHasReview] = useState(false);
  const [reviewCompleted, setReviewCompleted] = useState(false); // Ï∂îÍ∞Ä

  // üí° ÏàòÏ†ïÎêú useEffect: userInfo ÎòêÎäî postIdÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå APIÎ•º Îã§Ïãú Ìò∏Ï∂úÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
  useEffect(() => {
    if (!postId) return;

    // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏúÑÎ°ú Ïù¥Îèô
    window.scrollTo(0, 0);

    console.log("‚úÖ useEffect Ïã§ÌñâÎê®. postId:", postId, "ÌòÑÏû¨ userInfo:", userInfo);

    // ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ Ìó§ÎçîÏóê Ìè¨Ìï®ÌïòÍ≥†, ÏóÜÏúºÎ©¥ Îπà Í∞ùÏ≤¥Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.
    const headers = token ? { 'Authorization': `Bearer ${token}` } : {};

    // Î™®Îì† API Ìò∏Ï∂úÏùÑ Promise.allSettledÎ°ú Î≥ëÎ†¨ Ï≤òÎ¶¨ÌïòÏó¨ ÏùºÎ∂Ä Ïã§Ìå®Ìï¥ÎèÑ Îã§Î•∏ Îç∞Ïù¥ÌÑ∞Îäî Î°úÎìú
    const fetchPostData = axios.get(`http://localhost:4989/post/detail?postId=${postId}`, { headers });
    const fetchGoodsData = axios.get(`http://localhost:4989/post/itemdetail?postId=${postId}`, { headers });
    const fetchCarsData = axios.get(`http://localhost:4989/post/cardetail?postId=${postId}`, { headers });
    const fetchEstateData = axios.get(`http://localhost:4989/post/estatedetail?postId=${postId}`, { headers });

    Promise.allSettled([fetchPostData, fetchGoodsData, fetchCarsData, fetchEstateData])
      .then((results) => {
        const [postResult, goodsResult, carsResult, estateResult] = results;
        
        console.log("‚úÖ API ÏùëÎãµ Í≤∞Í≥º:", {
          post: postResult.status,
          goods: goodsResult.status,
          cars: carsResult.status,
          estate: estateResult.status
        });

        // Post Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        if (postResult.status === 'fulfilled') {
          const postData = postResult.value.data;
          console.log("‚úÖ Post Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏÑ±Í≥µ:", postData);
          
          // buyerId ÌïÑÎìú ÌôïÏù∏
          console.log("üîç buyerId ÌôïÏù∏:", {
            buyerId: postData.buyerId,
            buyerIdType: typeof postData.buyerId,
            hasBuyerId: 'buyerId' in postData
          });
          
          // post Îç∞Ïù¥ÌÑ∞Ïùò content ÌïÑÎìú ÌôïÏù∏
          console.log("üìù Post content ÌôïÏù∏:", {
            content: postData.content,
            hasContent: !!postData.content,
            contentType: typeof postData.content,
            contentLength: postData.content ? postData.content.length : 0
          });

          setPost(postData);

          // ÌåêÎß§ÏôÑÎ£å ÏÉÅÌÉúÏù∏ Í≤ΩÏö∞ Íµ¨Îß§Ïûê Ï†ïÎ≥¥Îäî post.buyerIdÏóêÏÑú ÏßÅÏ†ë Í∞ÄÏ†∏Ïò¥
          // localStorage Î≥µÏõê Î°úÏßÅ Ï†úÍ±∞

          const photoList = Array.isArray(postData.photos)
            ? postData.photos
            : JSON.parse(postData.photos || "[]");
          setPhotos(photoList);
        } else {
          console.error("‚ùå Post Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", postResult.reason);
        }

        // Goods Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        if (goodsResult.status === 'fulfilled') {
          setGoods(goodsResult.value.data);
        } else {
          console.error("‚ùå Goods Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", goodsResult.reason);
        }

        // Cars Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        if (carsResult.status === 'fulfilled') {
          setCars(carsResult.value.data);
        } else {
          console.error("‚ùå Cars Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", carsResult.reason);
        }

        // Estate Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨
        if (estateResult.status === 'fulfilled') {
          setEstate(estateResult.value.data);
        } else {
          console.error("‚ùå Estate Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:", estateResult.reason);
        }
      })
      .catch(err => {
        console.error("Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë ÏóêÎü¨:", err);
        console.error("ÏóêÎü¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥:", {
          message: err.message,
          response: err.response?.data,
          status: err.response?.status
        });
        
        // ÏóêÎü¨ Î∞úÏÉù ÏãúÏóêÎèÑ Í∏∞Î≥∏ Îç∞Ïù¥ÌÑ∞ÎùºÎèÑ ÏÑ§Ï†ï
        if (err.response?.data) {
          console.log("ÏóêÎü¨ ÏùëÎãµÏóêÏÑú Î∞õÏùÄ Îç∞Ïù¥ÌÑ∞:", err.response.data);
        }
      });

    // üí° localStorage Í∞êÏßÄ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑàÎäî Ïù¥Ï†ú ÌïÑÏöî ÏóÜÏäµÎãàÎã§.
    // AuthContextÍ∞Ä ÏÉÅÌÉúÎ•º Í¥ÄÎ¶¨ÌïòÎØÄÎ°ú, contextÏùò Î≥ÄÍ≤ΩÏóê Îî∞Îùº Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä Ïû¨Î†åÎçîÎßÅÎê©ÎãàÎã§.
  }, [postId, userInfo, token]); // ÏùòÏ°¥ÏÑ± Î∞∞Ïó¥Ïóê userInfoÏôÄ tokenÏùÑ Ï∂îÍ∞Ä

  // selectedBuyerId ÏÉÅÌÉú Ï†úÍ±∞ - post.buyerIdÎ•º ÏßÅÏ†ë ÏÇ¨Ïö©
  // const [selectedBuyerId, setSelectedBuyerId] = useState(null);

  // view count(Ï°∞ÌöåÏàò)
  const incCalledRef = useRef(false);

  useEffect(() => {
    if (!postId) return;
    if (incCalledRef.current) return;   // ‚úÖ Îëê Î≤àÏß∏ Ïã§Ìñâ Ï∞®Îã® (StrictMode/Ïû¨Î†åÎçî)
    incCalledRef.current = true;

    axios.post(`http://localhost:4989/post/viewcount?postId=${postId}`)
      .catch(console.error);
  }, [postId]);

  //Ï¢ãÏïÑÏöîÍ∞ØÏàò
  useEffect(() => {
    axios.get(`http://localhost:4989/post/count?postId=${postId}`)
      .then(({ data }) => setCount(Number(data.count) || 0))
      .catch(err => console.log(err));
  }, [postId]);

  // ÎÇ¥Í∞Ä Ï¢ãÏïÑÏöî ÎàåÎ†ÄÎäîÏßÄ (Î°úÍ∑∏Ïù∏ÏãúÏóêÎßå Ìò∏Ï∂ú)
  // useEffect(() => {
  //   if (!postId || !userInfo?.memberId) return;
  //   axios
  //     .get(`http://localhost:4989/post/checkfav`, { params: { postId } })
  //     .then(({ data }) => setFavorited(Boolean(data.favorited)))
  //     .catch(() => setFavorited(false));
  // }, [postId, userInfo]);

  // ÎÇ¥Í∞Ä Ï¢ãÏïÑÏöî ÎàåÎ†ÄÎäîÏßÄ (Î°úÍ∑∏Ïù∏ÏãúÏóêÎßå Ìò∏Ï∂ú)
  useEffect(() => {
    if (!postId || !userInfo?.memberId) return;

    console.group('[checkfav] ÏöîÏ≤≠ ÏãúÏûë');
    console.log('postId:', postId, 'memberId:', userInfo.memberId);

    axios.get('http://localhost:4989/post/checkfav', { params: { postId } })
      .then(({ data, status }) => {
        console.log('HTTP status:', status);
        console.log('response data:', data);
        const value = !!data?.favorited;
        console.log('parsed favorited:', value);
        setFavorited(value);
      })
      .catch((err) => {
        console.error('ÏöîÏ≤≠ Ïã§Ìå®:', {
          status: err.response?.status,
          data: err.response?.data,
          message: err.message,
        });
        setFavorited(false);
      })
      .finally(() => console.groupEnd());
  }, [postId, userInfo]);



  // ÌõÑÍ∏∞ Í¥ÄÎ†® Ìï®ÏàòÎì§
  const handleReviewClick = () => {
    const isSeller = userInfo?.memberId === post?.memberId;
    const reviewerId = userInfo?.memberId;
    const reviewOppositeId = isSeller ? post?.buyerId : post?.memberId;
    
    console.log('ÌõÑÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠Îê®:', {
      postId,
      reviewerId,
      reviewOppositeId,
      isSeller,
      postMemberId: post?.memberId,
      userMemberId: userInfo?.memberId,
      buyerId: post?.buyerId
    });
    
    setShowReviewModal(true);
  };

  const handleReviewSubmitted = () => {
    console.log('ÌõÑÍ∏∞ ÏûëÏÑ± ÏôÑÎ£åÎê®');
    setReviewCompleted(true); // ÌõÑÍ∏∞ ÏûëÏÑ± ÏôÑÎ£å ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ï
    setHasReview(true);
    setShowReviewModal(false);
  };

  const handleReviewModalClose = () => {
    setShowReviewModal(false);
  };

  const canWriteReview = () => {
    const isSeller = userInfo?.memberId === post?.memberId;
    const isBuyer = post?.buyerId === userInfo?.memberId;
    const statusCheck = post?.status === 'SOLD';
    const noReviewCheck = !hasReview;
    const buyerSelectedCheck = post?.buyerId !== null;
    
    console.log('=== canWriteReview ÏÉÅÏÑ∏ Ï≤¥ÌÅ¨ ===');
    console.log('Í∏∞Î≥∏ Ï†ïÎ≥¥:', {
      userInfo: !!userInfo,
      memberId: userInfo?.memberId,
      postMemberId: post?.memberId,
      status: post?.status,
      hasReview,
      buyerId: post?.buyerId,
      buyerIdType: typeof post?.buyerId,
      hasBuyerIdField: 'buyerId' in (post || {})
    });
    
    console.log('Ï°∞Í±¥Î≥Ñ Ï≤¥ÌÅ¨:', {
      isSeller,
      isBuyer,
      statusCheck,
      noReviewCheck,
      buyerSelectedCheck
    });
    
    // ÌåêÎß§Ïûê Ï°∞Í±¥ Ï≤¥ÌÅ¨ (ÏûÑÏãúÎ°ú selectedBuyerId Ï≤¥ÌÅ¨ Ï†úÍ±∞)
    if (userInfo?.memberId === post?.memberId && post?.status === 'SOLD' && !hasReview) {
      console.log('‚úÖ ÌåêÎß§Ïûê ÌõÑÍ∏∞ ÏûëÏÑ± Í∞ÄÎä•');
      return true;
    }
    
    // Íµ¨Îß§Ïûê Ï°∞Í±¥ Ï≤¥ÌÅ¨
    if (post?.status === 'SOLD' && !hasReview && post?.buyerId === userInfo?.memberId) {
      console.log('‚úÖ Íµ¨Îß§Ïûê ÌõÑÍ∏∞ ÏûëÏÑ± Í∞ÄÎä•');
      return true;
    }
    
    console.log('‚ùå ÌõÑÍ∏∞ ÏûëÏÑ± Î∂àÍ∞ÄÎä•');
    return false;
  };

  //Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä
  const onToggle = async () => {
    if (!userInfo?.memberId) {
      alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      return;
    }
    try {
      const { data } = await axios.post(
        `http://localhost:4989/post/toggle`,
        null,
        { params: { postId } }
      );
      setFavorited(Boolean(data.favorited));
      setCount(Number(data.count) || 0);
    } catch (e) {
      console.error(e);
      alert('Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    }
  };


  // Í≤åÏãúÍ∏Ä ÏÇ≠Ï†ú
  const handleDeletePost = async () => {
    if (!postId) return;

    if (!userInfo?.memberId) {
      alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
      navi('/login', { replace: true, state: { from: location.pathname } });
      return;
    }
    if (userInfo.memberId !== post?.memberId) {
      alert('ÏÇ≠Ï†ú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§. ÏûëÏÑ±ÏûêÎßå ÏÇ≠Ï†úÌï† Ïàò ÏûàÏñ¥Ïöî.');
      return;
    }
    if (!window.confirm('Ï†ïÎßêÎ°ú Ïù¥ Í≤åÏãúÍ∏ÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†Ïñ¥Ïöî?')) return;

    setDeleting(true);
    try {
      await axios.delete(`http://localhost:4989/post/${postId}`); // Ïø†ÌÇ§ Ïù∏Ï¶ùÏù¥Î©¥ Ìó§Îçî ÏóÜÏù¥ OK
      alert('ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      navi('/goods');
    } catch (e) {
      // ÏùëÎãµ ÏûêÏ≤¥Í∞Ä ÏóÜÏùÑ Îïå (ÎÑ§Ìä∏ÏõåÌÅ¨/ÌîÑÎ¶¨ÌîåÎùºÏù¥Ìä∏/CORS)
      if (!e.response) {
        console.log('navigator.onLine =', navigator.onLine, 'message =', e.message, 'code =', e.code);
        alert('ÎÑ§Ìä∏ÏõåÌÅ¨/ÌîÑÎ°ùÏãú/CORS Î¨∏Ï†úÎ°ú ÏöîÏ≤≠Ïù¥ Ï∞®Îã®ÎêêÏäµÎãàÎã§. ÏΩòÏÜî ÌôïÏù∏!');
        return;
      }
      const { status, data } = e.response;
      console.log('status =', status, 'data =', data);
      if (status === 401) {
        navi('/login', { replace: true, state: { from: location.pathname } });
      } else if (status === 403) {
        alert('ÏûëÏÑ±ÏûêÎßå ÏÇ≠Ï†úÌï† Ïàò ÏûàÏñ¥Ïöî.');
      } else if (status === 404) {
        alert('Ïù¥ÎØ∏ ÏÇ≠Ï†úÎêòÏóàÍ±∞ÎÇò Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Í≤åÏãúÍ∏ÄÏûÖÎãàÎã§.');
      } else {
        alert('ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
      }
    } finally {
      setDeleting(false);
    }
  };


  const handleChatToggle = async () => {
    // Ï±ÑÌåÖÏ∞ΩÏù¥ Ïù¥ÎØ∏ Ïó¥Î†§ ÏûàÎã§Î©¥, Îã´ÏïÑÏ£ºÎäî Î°úÏßÅÏùÑ Ïã§ÌñâÌï©ÎãàÎã§.
    if (showChat) {
      setShowChat(false);
      // Ïó¥Î¶∞ Ï±ÑÌåÖÏ∞ΩÏùÑ Îã´Îäî Í≤ÉÏù¥ÎØÄÎ°ú, Ïó¨Í∏∞ÏÑú Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
      return;
    }

    try {
      const parsedPostId = parseInt(postId, 10);
      // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú ÏÇ¨Ïö©ÏûêÏùò IDÎ•º Íµ¨Îß§Ïûê(buyerId)Î°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
      const buyerId = userInfo.memberId;
      // Í≤åÏãúÍ∏ÄÏùÑ ÏûëÏÑ±Ìïú ÏÇ¨Ïö©ÏûêÏùò IDÎ•º ÌåêÎß§Ïûê(sellerId)Î°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
      const sellerId = post.memberId;

      // Ï∂îÍ∞Ä: Íµ¨Îß§ÏûêÏôÄ ÌåêÎß§ÏûêÍ∞Ä ÎèôÏùºÌïú Í≤ΩÏö∞ Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±ÏùÑ ÎßâÏäµÎãàÎã§.
      if (buyerId === sellerId) {
        alert('ÏûêÏã†Ïù¥ Ïò¨Î¶∞ Í≤åÏãúÍ∏ÄÏóêÎäî Ï±ÑÌåÖÏùÑ ÏãúÏûëÌï† Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      // 1. Í∏∞Ï°¥ Ï±ÑÌåÖÎ∞©Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏ÌïòÎäî POST ÏöîÏ≤≠
      const enterResponse = await axios.post(
        'http://localhost:4989/room/enter',
        { productId: parsedPostId, buyerId: buyerId },
        { headers: { 'Authorization': `Bearer ${userInfo.token}` } }
      );

      let chatRoomId = enterResponse.data;

      // 2. Í∏∞Ï°¥ Ï±ÑÌåÖÎ∞©Ïù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°úÏö¥ Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Î∞è Ï≤´ Î©îÏãúÏßÄ Ï†ÑÏÜ°
      if (!chatRoomId) {
        const createResponse = await axios.post(
          'http://localhost:4989/room/create-with-message',
          {
            productId: parsedPostId,
            sellerId: sellerId,
            buyerId: buyerId,
            messageContent: "ÏïàÎÖïÌïòÏÑ∏Ïöî, Ï±ÑÌåÖ ÏãúÏûëÌï©ÎãàÎã§."
          },
          { headers: { 'Authorization': `Bearer ${userInfo.token}` } }
        );
        chatRoomId = createResponse.data;
      }

      // 3. Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const chatRoomResponse = await axios.get(
        `http://localhost:4989/chat/room?chatRoomId=${chatRoomId}&memberId=${buyerId}`,
        { headers: { 'Authorization': `Bearer ${userInfo.token}` } }
      );

      setChatRoom(chatRoomResponse.data);
      setShowChat(true); // Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∂àÎü¨ÏôÄÏßÄÎ©¥ Ï±ÑÌåÖÏ∞ΩÏùÑ ÏóΩÎãàÎã§.

    } catch (e) {
      console.error("Ï±ÑÌåÖÎ∞© Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:", e.response?.data || e.message);
      alert('Ï±ÑÌåÖÎ∞©ÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  };


  // const handleSubmitReport = async () => {
  //     if (!reportReason.trim()) return;
  //     try {
  //       setSubmitting(true);
  //       await axios.post('http://localhost:4989/post/report', {
  //         postId,
  //         reason: reportReason.trim(),
  //       });
  //       alert('Î≥¥ÎÉàÏäµÎãàÎã§!');
  //       setReportReason('');
  //       setOpen(false);
  //     } catch (e) {
  //       console.error(e);
  //       alert('Ï†ÑÏÜ° Ïã§Ìå®');
  //     } finally {
  //       setSubmitting(false);
  //     }

  //   };

  const handleChangeType = (type) => {
    setReportType(type);
    setTargetId(type === 'POST' ? Number(postId) :
      type === 'MEMBER' ? Number(authorId) : null);
    console.log(authorId);
    console.log(postId);
  };

  const handleSubmitReport = async () => {
    if (!reportReason.trim()) return;
    if (!token || token === "null" || token === "undefined") {
      alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
      return;
    }

    // ÏÑ†ÌÉùÏóê Îî∞Îùº targetId Í≤∞Ï†ï
    // const targetId =
    //   reportType === 'POST'   ? Number(postId) :
    //   reportType === 'MEMBER' ? Number(authorId) :
    //   null;

    if (!targetId) { alert('ÎåÄÏÉÅ Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'); return; }

    try {
      setSubmitting(true);

      const fd = new FormData();
      fd.append('targetType', reportType);          // ‚úÖ ÏÑ†ÌÉùÍ∞í Î∞òÏòÅ
      if (reportType === "POST") fd.append("targetPostId", targetId);
      if (reportType === "MEMBER") fd.append("targetMemberId", targetId);
      fd.append('reason', reportReason.trim());
      fd.append('status', 'PENDING');

      console.log(reportType);
      console.log(targetId);
      console.log(reportReason);

      await axios.post('http://localhost:4989/post/report', fd, {
        headers: { Authorization: `Bearer ${token}` }, // Content-Type ÏûêÎèô
      });

      alert('Î≥¥ÎÉàÏäµÎãàÎã§!');
      setReportReason('');
      setReportType('');
      setOpen(false);
    } catch (e) {
      console.error(e);
      alert(e?.response?.data || 'Ï†ÑÏÜ° Ïã§Ìå®');
    } finally {
      setSubmitting(false);
    }
  };

  // ÌÉ≠Î≥Ñ Í∏∞Î≥∏ Í≤ΩÎ°ú (fromÏù¥ ÏóÜÏùÑ ÎïåÏö©)
  const getFallbackListPath = () => {
    switch (post?.postType) {
      case 'CARS':
        return '/cars';
      case 'REAL_ESTATES':
        return '/real_estate';
      case 'ITEMS':
      default:
        return '/goods';
    }
  };

  // Î™©Î°ù Î≥µÍ∑Ä Ìï∏Îì§Îü¨
  const handleGoBackToList = () => {
    const { from, focusId } = location.state || {};
    // 1) Î¶¨Ïä§Ìä∏ÏóêÏÑú Îì§Ïñ¥Ïò® Í≤ΩÏö∞: from(URLÏóê ?page Ìè¨Ìï®)ÏúºÎ°ú ÎêòÎèåÎ¶¨Î©¥ÏÑú ÌÅ¥Î¶≠ Ïπ¥ÎìúÎ°ú Ìè¨Ïª§Ïä§
    if (from) {
      navi(from, { state: { focusId: focusId ?? Number(postId) } });
      return;
    }
    // 2) Ïô∏Î∂ÄÏóêÏÑú Î∞îÎ°ú ÏÉÅÏÑ∏Î°ú Îì§Ïñ¥Ïò® Í≤ΩÏö∞: ÌÉ≠ Í∏∞Î≥∏ Í≤ΩÎ°úÎ°ú Ïù¥Îèô(ÌéòÏù¥ÏßÄÎäî Í∏∞Î≥∏ 1), Í∑∏ÎûòÎèÑ Ïπ¥Îìú Ìè¨Ïª§Ïä§ ÏãúÎèÑ
    navi(getFallbackListPath(), { state: { focusId: Number(postId) } });
  };

  // ÌåêÎß§ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
  const handleStatusChange = async (newStatus) => {
    if (!userInfo || !post || Number(userInfo.memberId) !== Number(post.memberId)) {
      alert('Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.');
      return;
    }

    if (newStatus === post.status) {
      return; // Í∞ôÏùÄ ÏÉÅÌÉúÎ©¥ Î≥ÄÍ≤ΩÌïòÏßÄ ÏïäÏùå
    }

    // ÌåêÎß§ÏôÑÎ£å ÏÑ†ÌÉù Ïãú Í±∞ÎûòÏûê ÏÑ†ÌÉù Î™®Îã¨ Ïó¥Í∏∞
    if (newStatus === 'SOLD') {
      setShowBuyerModal(true);
      return;
    }

    // ÏùºÎ∞ò ÏÉÅÌÉú Î≥ÄÍ≤Ω (ÌåêÎß§Ï§ë, ÏòàÏïΩÏ§ë)
    setIsUpdatingStatus(true);
    try {
      const response = await axios.put(
        `http://localhost:4989/post/updateStatus?postId=${postId}&status=${newStatus}`,
        null,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );

      if (response.data.success) {
        setPost(prev => ({ ...prev, status: newStatus }));
        alert('ÌåêÎß§ ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.');
      } else {
        alert('ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('ÌåêÎß§ ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïã§Ìå®:', error);
      alert('ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsUpdatingStatus(false);
    }
  };

  // Í±∞ÎûòÏûê ÏÑ†ÌÉù ÏôÑÎ£å Ìï∏Îì§Îü¨
  const handleBuyerSelectionComplete = (buyerId) => {
    console.log('Íµ¨Îß§Ïûê ÏÑ†ÌÉù ÏôÑÎ£å:', {
      buyerId,
      buyerIdType: typeof buyerId,
      postId
    });
    
    // ÏÉÅÌÉúÎ•º SOLDÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† ÏÑ†ÌÉùÎêú Íµ¨Îß§Ïûê ID Ï†ÄÏû•
    setPost(prev => ({ ...prev, status: 'SOLD', buyerId: buyerId }));
    
    setShowBuyerModal(false);
    
    console.log('ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', {
      buyerId: buyerId,
      postStatus: 'SOLD'
    });
  };

  // ÏÇ¨ÏßÑ Ïä¨ÎùºÏù¥Îìú Í¥ÄÎ†® Ìï®ÏàòÎì§
  const nextPhoto = () => {
    if (photos && photos.length > 0) {
      setCurrentPhotoIndex((prevIndex) => 
        prevIndex === photos.length - 1 ? 0 : prevIndex + 1
      );
    }
  };

  const prevPhoto = () => {
    if (photos && photos.length > 0) {
      setCurrentPhotoIndex((prevIndex) => 
        prevIndex === 0 ? photos.length - 1 : prevIndex - 1
      );
    }
  };

  // const goToPhoto = (index) => {
  //   setCurrentPhotoIndex(index);
  // };



  if (!post) return <div className="loading-container">Î°úÎî© Ï§ë...</div>;

  return (
    <div className="gooddetail-page">
      <div className="gooddetail-container">
        {/* Î©îÏù∏ ÏΩòÌÖêÏ∏† ÏòÅÏó≠ - 2Îã® Î†àÏù¥ÏïÑÏõÉ */}
        <div className="gooddetail-main">
          {/* ÏôºÏ™Ω Ïù¥ÎØ∏ÏßÄ ÏòÅÏó≠ */}
          <div className="gooddetail-gallery">
            <h3 className="gooddetail-gallery-title">ÏÇ¨ÏßÑ Î™©Î°ù</h3>
            <div className="gooddetail-slider">
              {photos && photos.length > 0 && photos[currentPhotoIndex]?.photoUrl && photos[currentPhotoIndex].photoUrl !== 'null' ? (
                <>
                  <div className="gooddetail-slider-container">
                    <img
                      src={`http://localhost:4989/postphoto/${photos[currentPhotoIndex].photoUrl}`}
                      alt=""
                      className="gooddetail-slider-photo"
                      onError={(e) => {
                        e.target.style.display = 'none';
                        e.target.nextSibling.style.display = 'flex';
                      }}
                    />
                    
                    {/* Ïù¥ÎØ∏ÏßÄ Î°úÎìú Ïã§Ìå® Ïãú ÌëúÏãúÌï† Ïù¥ÎØ∏ÏßÄ ÏóÜÏùå Î©îÏãúÏßÄ */}
                    <div className="gooddetail-no-photos" style={{ display: 'none' }}>
                      <p>Îì±Î°ùÎêú ÏÇ¨ÏßÑÏù¥ ÏóÜÏäµÎãàÎã§</p>
                    </div>
                    
                    {/* Ïù¥Ï†Ñ Î≤ÑÌäº */}
                    {photos.length > 1 && (
                      <button 
                        className="gooddetail-slider-btn gooddetail-slider-btn-prev"
                        onClick={prevPhoto}
                        aria-label="Ïù¥Ï†Ñ ÏÇ¨ÏßÑ"
                      >
                        ‚Äπ
                      </button>
                    )}
                    
                    {/* Îã§Ïùå Î≤ÑÌäº */}
                    {photos.length > 1 && (
                      <button 
                        className="gooddetail-slider-btn gooddetail-slider-btn-next"
                        onClick={nextPhoto}
                        aria-label="Îã§Ïùå ÏÇ¨ÏßÑ"
                      >
                        ‚Ä∫
                      </button>
                    )}
                  </div>
                  
                  {/* ÏÇ¨ÏßÑ Ïù∏ÎîîÏºÄÏù¥ÌÑ∞ */}
                  {/* {photos.length > 1 && (
                    <div className="gooddetail-slider-indicators">
                      {photos.map((_, index) => (
                        <button
                          key={index}
                          className={`gooddetail-slider-indicator ${index === currentPhotoIndex ? 'active' : ''}`}
                          onClick={() => goToPhoto(index)}
                          aria-label={`${index + 1}Î≤àÏß∏ ÏÇ¨ÏßÑÏúºÎ°ú Ïù¥Îèô`}
                        />
                      ))}
                    </div>
                  )} */}
                  
                  {/* ÏÇ¨ÏßÑ Ïπ¥Ïö¥ÌÑ∞ */}
                  <div className="gooddetail-slider-counter">
                    {currentPhotoIndex + 1} / {photos.length}
                  </div>
                </>
              ) : (
                <div className="gooddetail-no-photos">
                  <p>Îì±Î°ùÎêú ÏÇ¨ÏßÑÏù¥ ÏóÜÏäµÎãàÎã§</p>
                </div>
              )}
            </div>
          </div>

          {/* Ïò§Î•∏Ï™Ω ÏÉÅÌíà Ï†ïÎ≥¥ ÏòÅÏó≠ */}
          <div className="gooddetail-info-section">
            {/* ÏÉÅÌíà Ìó§Îçî Ï†ïÎ≥¥ */}
            <div className="gooddetail-header">
              <h1 className="gooddetail-title">{post.title}</h1>
              
              {/* Í∞ÄÍ≤© ÏÑπÏÖò */}
              <div className="gooddetail-price">
                <div className="gooddetail-price-value">
                  {post.price ? new Intl.NumberFormat().format(post.price) + 'Ïõê' : 'Í∞ÄÍ≤© ÎØ∏Ï†ï'}
                </div>
              </div>
            </div>

            {/* ÏÉÅÌò∏ÏûëÏö© Î©îÌä∏Î¶≠Ïä§ - Î≤àÍ∞úÏû•ÌÑ∞ Ïä§ÌÉÄÏùº */}
            <div className="gooddetail-metrics">
              <div className="gooddetail-metrics-left">
                <div className="gooddetail-metric-item">
                  <span className="gooddetail-metric-icon">‚ù§Ô∏è</span>
                  <span>{count}</span>
                </div>
                <div className="gooddetail-metric-item">
                  <span className="gooddetail-metric-icon">üëÅÔ∏è</span>
                  <span>{post.viewCount}</span>
                </div>
                <div className="gooddetail-metric-item">
                  <span className="gooddetail-metric-icon">üïê</span>
                  <span>{post.createdAt ? new Date(post.createdAt).toLocaleString('ko-KR', { month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric' }) : ''}</span>
                </div>
              </div>
              <div className="gooddetail-metrics-right">
                 {!userInfo || Number(userInfo.memberId) !== Number(post.memberId) && (
                <button className="gooddetail-report-btn" onClick={() => setOpen(true)}>
                Ïã†Í≥†/Î¨∏Ïùò
              </button>
                )
              }
              </div>
            </div>

            {/* ÏÉÅÌíà ÏÉÅÌÉú Î∞è Î∞∞ÏÜ° Ï†ïÎ≥¥ */}
            <div className="gooddetail-product-info">
              <div className="gooddetail-info-row">
                <span className="gooddetail-info-label">ÏÉÅÌíàÏÉÅÌÉú</span>
                <span className="gooddetail-info-value">
                  <span className={`gooddetail-status ${post.status === 'ON_SALE' ? 'on-sale' : post.status === 'RESERVED' ? 'reserved' : 'sold'}`}>
                    {post.status === 'ON_SALE' ? 'ÌåêÎß§Ï§ë' : post.status === 'RESERVED' ? 'ÏòàÏïΩÏ§ë' : 'ÌåêÎß§ÏôÑÎ£å'}
                  </span>
                </span>
              </div>
              <div className="gooddetail-info-row">
                <span className="gooddetail-info-label">Î∞∞ÏÜ°ÎπÑ</span>
                <span className="gooddetail-info-value">Î¨¥Î£åÎ∞∞ÏÜ°</span>
              </div>
            </div>

            {/* Ïï°ÏÖò Î≤ÑÌäºÎì§ - Î≤àÍ∞úÏû•ÌÑ∞ Ïä§ÌÉÄÏùº */}
            <div className="gooddetail-action-buttons">
              <button onClick={onToggle} className="gooddetail-like-btn">
                <span className="like-icon">{favorited ? "‚ù§Ô∏è" : "ü§ç"}</span>
                <span>Ï∞ú {count}</span>
              </button>
                {/* ÎåÄÌôî Î≤ÑÌäº: Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏùº ÎïåÎßå 'handleChatToggle' Ïã§Ìñâ */}
              {userInfo ? (
                <button className="gooddetail-chat-btn" onClick={handleChatToggle}>
                  ÎåÄÌôî
                </button>
              ) : (
                // ÎπÑÎ°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏùº Îïå
                <button className="gooddetail-chat-btn" onClick={() => alert('Î°úÍ∑∏Ïù∏ ÌõÑ Ïù¥Ïö© Í∞ÄÎä•Ìï©ÎãàÎã§.')}>
                  ÎåÄÌôî
                </button>
              )}

          {/* ÏûëÏÑ±Ïûê Î≥∏Ïù∏ÏóêÍ≤åÎßå Î≥¥Ïù¥Îäî ÏàòÏ†ï/ÏÇ≠Ï†ú Î≤ÑÌäº */}
          {userInfo && userInfo.memberId === post.memberId && (
            <>
            <button
                type="button"
                className="gooddetail-btn"
                onClick={() => navi(`/board/update?postId=${postId}`)}
              >
                ÏàòÏ†ï
              </button>

              <button
                type="button"
                className="gooddetail-btn danger"
                onClick={handleDeletePost}
                disabled={deleting}
              >
                {deleting ? 'ÏÇ≠Ï†ú Ï§ë...' : 'ÏÇ≠Ï†ú'}
              </button>
            </>
          )}

          <button 
            className="gooddetail-btn secondary"
            onClick={handleGoBackToList}
          >
            Î™©Î°ù
          </button>

                      {/* ÏûëÏÑ±Ïûê Î≥∏Ïù∏Îßå Î≥º Ïàò ÏûàÎäî ÌåêÎß§ ÏÉÅÌÉú ÏÑ†ÌÉù */}
            {userInfo && userInfo.memberId === post.memberId && post.status !== 'SOLD' && (
                <div className="gooddetail-status-selector">
                    <label htmlFor="status-select" className="gooddetail-status-label">
                        ÌåêÎß§ ÏÉÅÌÉú Î≥ÄÍ≤Ω:
                    </label>
                    <select
                        id="status-select"
                        className="gooddetail-status-select"
                        value={post.status || 'ON_SALE'}
                        onChange={(e) => handleStatusChange(e.target.value)}
                        disabled={isUpdatingStatus}
                    >
                        <option value="ON_SALE">ÌåêÎß§Ï§ë</option>
                        <option value="RESERVED">ÏòàÏïΩÏ§ë</option>
                        <option value="SOLD">ÌåêÎß§ÏôÑÎ£å</option>
                    </select>
                    {isUpdatingStatus && (
                        <span className="gooddetail-status-updating">ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë...</span>
                    )}
                </div>
            )}
            
            {/* ÌåêÎß§ÏôÑÎ£å ÏÉÅÌÉúÏùº Îïå ÌõÑÍ∏∞ Î≤ÑÌäº ÎòêÎäî ÏôÑÎ£å Î©îÏãúÏßÄ ÌëúÏãú */}
            {userInfo && post.status === 'SOLD' && (
                <div className="gooddetail-status-completed">
                    {canWriteReview() ? (
                        <button 
                            className="gooddetail-review-btn"
                            onClick={handleReviewClick}
                        >
                            {userInfo.memberId === post.memberId ? 'ÌõÑÍ∏∞Î•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî' : 'ÌåêÎß§ÏûêÏóêÍ≤å ÌõÑÍ∏∞Î•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî'}
                        </button>
                    ) : reviewCompleted ? (
                        <div className="gooddetail-review-completed">
                            ÌõÑÍ∏∞ÏûëÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§
                        </div>
                    ) : null}
                </div>
            )}
            </div>

            {/* Î©îÌÉÄ Ï†ïÎ≥¥ */}
            <div className="gooddetail-meta">
              <div className="gooddetail-meta-item">
                <strong>ÏûëÏÑ±Ïûê:</strong> {post.nickname}
              </div>
              <div className="gooddetail-meta-item">
                <strong>ÏûëÏÑ±Ïùº:</strong> {post.createdAt ? new Date(post.createdAt).toLocaleString('ko-KR') : ''}
              </div>
              {/* ÏàòÏ†ïÏùº ÌëúÏãú - updatedAtÏù¥ ÏûàÍ≥† createdAtÍ≥º Îã§Î•º ÎïåÎßå ÌëúÏãú */}
              {post.updatedAt && post.updatedAt !== post.createdAt && (
                <div className="gooddetail-meta-item gooddetail-updated-item">
                  <strong>ÏàòÏ†ïÏùº:</strong> {new Date(post.updatedAt).toLocaleString('ko-KR')}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* ÏÉÅÌíà Ï†ïÎ≥¥ÏôÄ ÏÑ§Î™Ö ÏòÅÏó≠ - 2Îã® Î†àÏù¥ÏïÑÏõÉ */}
        <div className="gooddetail-detail-section">
          {/* ÏôºÏ™Ω - ÏÉÅÌíà ÏÑ§Î™Ö */}
          <div className="gooddetail-content-section">
            <h3 className="gooddetail-content-title">ÏÉÅÌíàÏÑ§Î™Ö</h3>
            <div className="gooddetail-content-text">
              {post.content && post.content.trim() ? (
                post.content
              ) : (
                <div style={{ color: '#999', fontStyle: 'italic' }}>
                  ÏÉÅÌíà ÏÑ§Î™ÖÏù¥ ÏóÜÏäµÎãàÎã§.
                </div>
              )}
            </div>
          </div>

          {/* Ïò§Î•∏Ï™Ω - ÏÉÅÌíà Ï†ïÎ≥¥ */}
          <div className="gooddetail-info-section-detail">
            <h3 className="gooddetail-info-title">ÏÉÅÌíàÏ†ïÎ≥¥</h3>
            <div className="gooddetail-info-grid">
              <div className="gooddetail-info-item">
                <div className="gooddetail-info-label">ÌåêÎß§Ïú†Ìòï</div>
                <div className="gooddetail-info-value">
                  {post.tradeType === 'SALE' ? 'ÌåêÎß§' : post.tradeType === 'AUCTION' ? 'Í≤ΩÎß§' : 'ÎÇòÎàî'}
                </div>
              </div>
              
              {post.postType === 'ITEMS' && goods && (
                <>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">ÏÉÅÌíàÏÉÅÌÉú</div>
                    <div className="gooddetail-info-value">
                      {goods.conditions === 'best' ? 'ÏÉÅ' : goods.conditions === 'good' ? 'Ï§ë' : 'Ìïò'}
                    </div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Î∂ÑÎ•ò</div>
                    <div className="gooddetail-info-value">
                      {goods.categoryId === 1 ? 'Ï†ÑÏûêÏ†úÌíà' : goods.categoryId === 2 ? 'ÏùòÎ•ò' : 'Í∞ÄÍµ¨'}
                    </div>
                  </div>
                </>
              )}
              
              {post.postType === 'CARS' && cars && (
                <>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Î∏åÎûúÎìú</div>
                    <div className="gooddetail-info-value">{cars.brand}</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Î™®Îç∏</div>
                    <div className="gooddetail-info-value">{cars.model}</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Ïó∞Ïãù</div>
                    <div className="gooddetail-info-value">{cars.year}</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Ï£ºÌñâÍ±∞Î¶¨</div>
                    <div className="gooddetail-info-value">{cars.mileage}</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Ïó∞Î£å</div>
                    <div className="gooddetail-info-value">{cars.fuelType}</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Î≥ÄÏÜçÍ∏∞</div>
                    <div className="gooddetail-info-value">{cars.transmission}</div>
                  </div>
                </>
              )}
              
              {post.postType === 'REAL_ESTATES' && estate && (
                <>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Îß§Î¨ºÏ¢ÖÎ•ò</div>
                    <div className="gooddetail-info-value">
                      {estate.propertyType === 'apt' ? 'ÏïÑÌååÌä∏' : estate.propertyType === 'studio' ? 'Ïò§ÌîºÏä§ÌÖî' : estate.propertyType === 'oneroom' ? 'ÏõêÎ£∏' : 'Ìà¨Î£∏'}
                    </div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Î©¥Ï†Å</div>
                    <div className="gooddetail-info-value">{estate.area} „é°</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Î∞© Í∞úÏàò</div>
                    <div className="gooddetail-info-value">{estate.rooms} Í∞ú</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Ï∏µ</div>
                    <div className="gooddetail-info-value">{estate.floor} Ï∏µ</div>
                  </div>
                  <div className="gooddetail-info-item">
                    <div className="gooddetail-info-label">Í±∞ÎûòÏú†Ìòï</div>
                    <div className="gooddetail-info-value">
                      {estate.dealType === 'lease' ? 'Ï†ÑÏÑ∏' : estate.dealType === 'rent' ? 'ÏõîÏÑ∏' : estate.dealType === 'leaseAndrent' ? 'Ï†ÑÏõîÏÑ∏' : 'Îß§Îß§'}
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>



      

        

        {/* Ïã†Í≥† Î™®Îã¨ */}
        <ReportModal
          open={open}
          onClose={() => setOpen(false)}
          reason={reportReason}
          onChangeReason={(e) => setReportReason(e.target.value)}
          reportType={reportType}
          onChangeType={handleChangeType}
          onSubmit={handleSubmitReport}
          submitting={submitting}
        />



              {/* DetailChat Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ */}
        {showChat && chatRoom && <DetailChat open={showChat} onClose={handleChatToggle} chatRoom={chatRoom} />}
        
        {/* Í±∞ÎûòÏûê ÏÑ†ÌÉù Î™®Îã¨ */}
        <BuyerSelectionModal
          open={showBuyerModal}
          onClose={() => setShowBuyerModal(false)}
          postId={postId}
          token={token}
          onComplete={handleBuyerSelectionComplete}
        />
        
        {/* ÌõÑÍ∏∞ ÏûëÏÑ± Î™®Îã¨ */}
        <ReviewModal
          isOpen={showReviewModal}
          onClose={handleReviewModalClose}
          postId={postId}
          reviewerId={userInfo?.memberId}
          reviewOppositeId={
            userInfo?.memberId === post?.memberId 
              ? post?.buyerId  // ÌåêÎß§ÏûêÍ∞Ä ÏûëÏÑ± Ïãú: Íµ¨Îß§Ïûê ID
              : post?.memberId   // Íµ¨Îß§ÏûêÍ∞Ä ÏûëÏÑ± Ïãú: ÌåêÎß§Ïûê ID
          }
          onReviewSubmitted={handleReviewSubmitted}
        />
        </div>
      </div>
    );
  };

export default GoodsDetail;