<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="boot.sagu.mapper.PostsMapperInter">
<insert id="insertPost" parameterType="posts" useGeneratedKeys="true" keyProperty="postId">
	INSERT INTO posts(member_id,title,price,trade_type,auction_end_time,created_at,post_type,content) 
VALUES(#{memberId},#{title},#{price},#{tradeType},
		CASE
        WHEN #{tradeType} = 'AUCTION'
        THEN DATE_ADD(CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul'), INTERVAL 24 HOUR)
        ELSE NULL END, CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul'),#{postType},#{content})
</insert>
<!-- <select id="getAllPostData" resultType="posts">
	SELECT p.*, 
	       (SELECT photo_url FROM post_photos WHERE post_id = p.post_id AND is_main = 1 LIMIT 1) as mainPhotoUrl
	FROM posts p 
	ORDER BY p.post_id DESC
</select> -->
<!-- <select id="getPostData" resultType="posts" parameterType="Long">
	SELECT p.*, 
	       (SELECT photo_url FROM post_photos WHERE post_id = p.post_id AND is_main = 1 LIMIT 1) as mainPhotoUrl
	FROM posts p 
	where post_id=#{postId}
</select> -->

<!-- 상세리스트 -->
<select id="getPostData" resultType="map" parameterType="long">
  SELECT
    p.post_id          AS postId,
    p.member_id        AS memberId,
    p.title            AS title,
    p.price            AS price,
    p.trade_type       AS tradeType,
    p.status           AS status,
    p.view_count       AS viewCount,
    p.created_at       AS createdAt,
    p.updated_at       AS UpdatedAt,
    p.post_type        AS postType,
    m.nickname         AS nickname,
    m.member_id		   AS memberId,
    COALESCE(
      JSON_ARRAYAGG(
        JSON_OBJECT(
          'photoId',  pp.photo_id,
          'photoUrl', pp.photo_url,
          'isMain',   pp.is_main
        )
      ),
      JSON_ARRAY()
    ) AS photos
  FROM posts p
  LEFT JOIN members      m  ON m.member_id = p.member_id
  LEFT JOIN post_photos  pp ON pp.post_id  = p.post_id
  WHERE p.post_id = #{postId}
</select>

<!-- 전체리스트 -->
<select id="getPostListWithNick" resultType="map">
  SELECT
    p.post_id    AS postId,
    p.member_id  AS memberId,
    p.title      AS title,
    p.price      AS price,
    p.post_type  AS postType,
    p.created_at AS createdAt,
    p.view_count AS viewCount,
    p.status     AS status,
    (SELECT photo_url
       FROM post_photos
      WHERE post_id = p.post_id AND is_main = 1
      LIMIT 1) AS mainPhotoUrl,
    m.nickname   AS nickname
  FROM posts p
  LEFT JOIN members m ON m.member_id = p.member_id
  ORDER BY p.post_id DESC
</select>

    <!-- 조회수 -->
    <update id="increaseViewCount" parameterType="long">
	    UPDATE posts
	    SET view_count = view_count + 1
	    WHERE post_id = #{postId}
	</update>

    
     <!-- 찜 추가 -->
    <insert id="insertFavorite" parameterType="boot.sagu.dto.FavoritesDto">
        INSERT INTO favorites (
            member_id,
            post_id,
            created_at
        ) VALUES (
            #{memberId},
            #{postId},
            CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        )
    </insert>
    
     <!-- 찜 삭제 -->
    <delete id="deleteFavorite">
        DELETE FROM favorites
        WHERE post_id = #{postId} AND member_id = #{memberId}
    </delete>
    
    <!-- 찜 개수 조회 -->
    <select id="getFavoriteCount" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM favorites
        WHERE post_id = #{postId}
    </select>
    
	<!-- 나의 찜 상태 확인 -->
    <select id="existsFavorite" resultType="int" parameterType="map">
    SELECT COUNT(*) FROM favorites
    WHERE post_id = #{postId}
      AND member_id = #{memberId}
  </select>

</mapper>