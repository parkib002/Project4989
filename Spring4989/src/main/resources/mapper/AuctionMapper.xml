<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boot.sagu.mapper.AuctionMapper">

    <!-- 경매글 리스트 -->
    <select id="getAuctionPosts" resultType="boot.sagu.dto.PostsDto">
        SELECT 
            post_id,
            member_id,
            title,
            content,
            price,
            trade_type,
            status,
            auction_end_time,
            winner_id,
            view_count,
            created_at,
            updated_at,
            post_type
        FROM posts
        WHERE trade_type = 'AUCTION'
        ORDER BY created_at DESC
    </select>
    
    <!-- 경매글 상세 조회 -->
    <select id="getAuctionDetail" parameterType="long" resultType="boot.sagu.dto.PostsDto">
        SELECT 
            post_id,
            member_id,
            title,
            content,
            price,
            trade_type,
            status,
            auction_end_time,
            winner_id,
            view_count,
            created_at,
            updated_at,
            post_type
        FROM posts
        WHERE post_id = #{postId} AND trade_type = 'AUCTION'
        LIMIT 1
    </select>

    <!-- 입찰 정보 저장 -->
    <insert id="insertBid" parameterType="boot.sagu.dto.AuctionDto">
        INSERT INTO auction_bids (
            post_id,
            bidder_id,
            bid_amount,
            bid_time
        ) VALUES (
            #{postId},
            #{bidderId},
            #{bidAmount},
            CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        )
    </insert>

    <!-- 최고가 조회 -->
    <select id="getHighestBid" parameterType="long" resultType="boot.sagu.dto.AuctionDto">
        SELECT 
            bid_id,
            post_id,
            bidder_id,
            bid_amount,
            bid_time
        FROM auction_bids
        WHERE post_id = #{postId}
        ORDER BY bid_amount DESC,bid_time ASC
        LIMIT 1
    </select>

    <!-- 작성자 닉네임 조회 -->
    <select id="getMemberNickname" parameterType="long" resultType="boot.sagu.dto.MemberDto">
        SELECT 
            member_id,
            nickname
        FROM members
        WHERE member_id = #{memberId}
        LIMIT 1
    </select>

    <!-- 종료된 경매 목록 조회 (winner_id가 NULL이고 마감시간이 지난 경매) -->
    <select id="getEndedAuctions" resultType="boot.sagu.dto.PostsDto">
        <![CDATA[
        SELECT 
            post_id,
            member_id,
            title,
            content,
            price,
            trade_type,
            status,
            auction_end_time,
            winner_id,
            view_count,
            created_at,
            updated_at,
            post_type
        FROM posts
        WHERE trade_type = 'AUCTION' 
        AND winner_id IS NULL 
        AND auction_end_time < CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        AND status != 'SOLD'
        ]]>
    </select>

    <!-- winner_id 업데이트 경매종료 처리 -->
    <update id="updateWinnerId">
        UPDATE posts 
        SET winner_id = #{winnerId},
            updated_at = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        WHERE post_id = #{postId}
    </update>

    <!-- 경매 상태 업데이트 -->
    <update id="updateAuctionStatus">
        UPDATE posts 
        SET status = #{status},
            updated_at = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        WHERE post_id = #{postId}
    </update>
    
    <!-- 수동 경매 종료 시 상태와 종료시간 업데이트 -->
    <update id="updateAuctionStatusAndEndTime">
        UPDATE posts 
        SET status = #{status},
            auction_end_time = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul'),
            updated_at = CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        WHERE post_id = #{postId}
    </update>
    
     <!-- 찜 상태 확인 -->
    <select id="checkFavoriteStatus" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM favorites
        WHERE post_id = #{postId} AND member_id = #{memberId}
    </select>
    
     <!-- 찜 추가 -->
    <insert id="insertFavorite" parameterType="boot.sagu.dto.FavoritesDto">
        INSERT INTO favorites (
            member_id,
            post_id,
            created_at
        ) VALUES (
            #{memberId},
            #{postId},
            CONVERT_TZ(NOW(), 'UTC', 'Asia/Seoul')
        )
    </insert>
    
     <!-- 찜 삭제 -->
    <delete id="deleteFavorite">
        DELETE FROM favorites
        WHERE post_id = #{postId} AND member_id = #{memberId}
    </delete>
    
    <!-- 찜 개수 조회 -->
    <select id="getFavoriteCount" parameterType="long" resultType="int">
        SELECT COUNT(*)
        FROM favorites
        WHERE post_id = #{postId}
    </select>
    
      <!-- 경매 사진 조회 -->
    <select id="getAuctionPhotos" parameterType="long" resultType="map">
        SELECT 
            photo_id,
            post_id,
            photo_url,
            is_main
        FROM post_photos
        WHERE post_id = #{postId}
        ORDER BY is_main DESC, photo_id ASC
    </select>
	
	<!-- ==================================보증금 관련 =================================== -->
	<!-- 멤버가 게시글에 관한 보증급을 납부했는지 -->
	<select id="countAuctionGuaranteeByPostAndMember" resultType="int">
		select count(*) from auction_guarantees where post_id=#{postId} and member_id=#{memberId} and status IN ('PAID','HOLD')
	</select>
	
	<!-- 보증금 납부  -->
	<insert id="insertGuarantee" parameterType="GuaranteeDTO">
		 INSERT INTO auction_guarantees (post_id, member_id, amount, imp_uid,merchant_uid,status,created_at)
  							VALUES (#{postId}, #{memberId}, #{amount}, #{impUid},#{merchantUid},'PAID',now())
	</insert>
	
	<select id="existsGuaranteeByImpUid" parameterType="string" resultType="int">
	  SELECT COUNT(*) FROM auction_guarantees WHERE imp_uid = #{impUid}
	</select>
	
	<!-- 게시글에서 입찰자중 낙찰자가 아닌사람들의 모든정보 조회 -->
	<select id="findNonWinnerGuarantees" resultType="GuaranteeDTO">
  		select * from auction_guarantees where post_id=#{postId} 
  			and member_id!=#{winnerId} 	
  			and status = 'PAID'
	</select>
	<!-- 보증금 상태 변경  -->
	<update id="updateGuaranteeStatus">
	  UPDATE auction_guarantees
	  SET status = #{status},
	      refunded_at = CASE WHEN #{status}='REFUNDED' THEN NOW() ELSE refunded_at END,
	      forfeited_at = CASE WHEN #{status} = 'FORFEITED' THEN NOW() ELSE forfeited_at END
	  WHERE guarantee_id = #{guaranteeId}
	</update>
	<!-- 게시글 시작가 조회 -->
	<select id="getStartPrice" parameterType="long" resultType="int">
		select price from posts where post_id=#{postId, jdbcType=BIGINT} limit 1
	</select>
	
	<!-- 경매 삭제 -->
	<delete id="deleteAuction" parameterType="long">
		DELETE FROM posts WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 used_items 데이터 삭제 -->
	<delete id="deleteUsedItemsByPostId" parameterType="long">
		DELETE FROM used_items WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 사진 데이터 삭제 -->
	<delete id="deletePhotosByPostId" parameterType="long">
		DELETE FROM post_photos WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 favorites 데이터 삭제 -->
	<delete id="deleteFavoritesByPostId" parameterType="long">
		DELETE FROM favorites WHERE post_id = #{postId}
	</delete>
	
	<!-- 경매 삭제 전 연관된 chatroom 데이터 삭제 -->
	<delete id="deleteChatroomsByPostId" parameterType="long">
		DELETE FROM chatroom WHERE product_id = #{postId}
	</delete>
	
	<!-- 입찰 기록 조회 (최근 5개, 닉네임 포함) -->
	<select id="getBidHistory" parameterType="long" resultType="java.util.Map">
		SELECT 
			ab.bid_id as id,
			m.nickname as bidderName,
			ab.bid_amount as bidAmount,
			ab.bid_time as bidTime
		FROM auction_bids ab
		JOIN members m ON ab.bidder_id = m.member_id
		WHERE ab.post_id = #{postId}
		ORDER BY ab.bid_time DESC
		LIMIT 5
	</select>
	
	<!-- 조회수 증가 -->
	<update id="incrementViewCount" parameterType="long">
		UPDATE posts 
		SET view_count = view_count + 1 
		WHERE post_id = #{postId}
	</update>
	
		<!-- 보증금 단건 조회 -->
	<select id="findGuarantee" resultType="boot.sagu.dto.AuctionGuaranteeDTO">
	  SELECT * FROM auction_guarantees
	  WHERE post_id = #{postId} AND member_id = #{memberId}
	  LIMIT 1
	</select>
	
	<select id="findPaidGuaranteesByPost" parameterType="long" resultType="GuaranteeDTO">
		select * from auction_guarantee WHERE post_id = #{postId}  AND status = 'PAID'
	</select>

	<!-- 내 게시글 타입별 개수 조회 (위쪽 필터용) -->
	<select id="getMyPostsCounts" resultType="map">
		SELECT 
			COUNT(*) as total,
			SUM(CASE WHEN trade_type = 'AUCTION' THEN 1 ELSE 0 END) as auction,
			SUM(CASE WHEN trade_type = 'SALE' THEN 1 ELSE 0 END) as general,
			SUM(CASE WHEN trade_type = 'SHARE' THEN 1 ELSE 0 END) as giveaway,
			SUM(CASE WHEN trade_type = 'AUCTION' AND status = 'SOLD' AND winner_id IS NULL THEN 1 ELSE 0 END) as cancelled
		FROM posts 
		WHERE member_id = #{memberId}
	</select>

	<!-- 내 게시글 조회 (마이페이지 거래내역용) -->
	<select id="getMyPosts" resultType="map">
		<![CDATA[
		SELECT 
			p.post_id as postId,
			p.title,
			p.content as description,
			p.price,
			p.trade_type as tradeType,
			p.status,
			p.auction_end_time as endTime,
			p.view_count as viewCount,
			p.created_at as postDate,
			p.updated_at as updatedAt,
			p.winner_id as winnerId,
			m.nickname as seller,
			(SELECT CONCAT('/save/', photo_url) 
			 FROM post_photos 
			 WHERE post_id = p.post_id AND is_main = 1 
			 LIMIT 1) as image,

			CASE 
				WHEN p.trade_type = 'AUCTION' THEN 'auction'
				WHEN p.trade_type = 'SHARE' THEN 'giveaway'
				ELSE 'general'
			END as type,
			CASE 
				WHEN p.trade_type = 'AUCTION' AND p.status = 'ON_SALE' AND p.auction_end_time > NOW() THEN 'active'
				WHEN p.trade_type = 'AUCTION' AND p.status = 'ON_SALE' AND p.auction_end_time <= NOW() AND p.winner_id IS NULL THEN 'cancelled'
				WHEN p.trade_type = 'AUCTION' AND p.status = 'SOLD' THEN 'completed'
				WHEN p.trade_type = 'AUCTION' AND p.status = 'RESERVED' THEN 'reserved'
				WHEN p.trade_type != 'AUCTION' AND p.status = 'ON_SALE' THEN 'active'
				WHEN p.trade_type != 'AUCTION' AND p.status = 'SOLD' THEN 'completed'
				WHEN p.trade_type != 'AUCTION' AND p.status = 'RESERVED' THEN 'reserved'
				ELSE 'cancelled'
			END as postStatus,
			CASE WHEN p.trade_type = 'AUCTION' THEN 
				(SELECT COUNT(*) FROM auction_bids WHERE post_id = p.post_id)
			ELSE 0 END as biddersCount,
			CASE WHEN p.trade_type = 'AUCTION' THEN 
				(SELECT IFNULL(MAX(bid_amount), p.price) FROM auction_bids WHERE post_id = p.post_id)
			ELSE p.price END as currentPrice,
			CASE WHEN p.winner_id IS NOT NULL THEN 
				(SELECT nickname FROM members WHERE member_id = p.winner_id)
			ELSE NULL END as buyerName,
			CASE WHEN p.trade_type = 'AUCTION' AND p.auction_end_time < NOW() THEN false
				 WHEN p.trade_type = 'AUCTION' THEN true
				 ELSE NULL END as isActive
		FROM posts p
		JOIN members m ON p.member_id = m.member_id
		WHERE p.member_id = #{memberId}
		]]>
		<if test="type != null and type != 'all'">
			<choose>
				<when test="type == 'auction'">
					AND p.trade_type = 'AUCTION'
				</when>
				<when test="type == 'general'">
					AND p.trade_type = 'SALE'
				</when>
				<when test="type == 'giveaway'">
					AND p.trade_type = 'SHARE'
				</when>
			</choose>
		</if>
		<if test="status != null and status != 'all'">
			<choose>
				<when test="status == 'active'">
					AND ((p.trade_type = 'AUCTION' AND p.status = 'ON_SALE' AND p.auction_end_time &gt; NOW()) OR (p.trade_type != 'AUCTION' AND p.status = 'ON_SALE'))
				</when>
				<when test="status == 'reserved'">
					AND p.status = 'RESERVED'
				</when>
				<when test="status == 'completed'">
					AND p.status = 'SOLD'
				</when>
				<when test="status == 'bidding'">
					AND p.trade_type = 'AUCTION' AND p.auction_end_time &gt; NOW() AND p.status = 'ON_SALE'
				</when>
				<when test="status == 'cancelled'">
					AND (p.trade_type = 'AUCTION' AND p.auction_end_time &lt;= NOW() AND p.winner_id IS NULL)
				</when>
			</choose>
		</if>
		ORDER BY p.created_at DESC
	</select>

	<!-- 경매 게시글만 조회 -->
	<select id="getMyAuctionPosts" resultType="map">
		<![CDATA[
		SELECT 
			p.post_id as postId,
			p.title,
			p.content as description,
			p.price,
			p.trade_type as tradeType,
			p.status,
			p.auction_end_time as endTime,
			p.view_count as viewCount,
			p.created_at as createdAt,
			p.updated_at as updatedAt,
			p.winner_id as winnerId,
			m.nickname as seller,
			(SELECT CONCAT('/save/', photo_url) 
			 FROM post_photos 
			 WHERE post_id = p.post_id AND is_main = 1 
			 LIMIT 1) as image,
			'auction' as type,
			CASE 
				WHEN p.status = 'ON_SALE' AND p.auction_end_time > NOW() THEN 'active'
				WHEN p.status = 'ON_SALE' AND p.auction_end_time <= NOW() AND p.winner_id IS NULL THEN 'cancelled'
				WHEN p.status = 'SOLD' THEN 'completed'
				WHEN p.status = 'RESERVED' THEN 'reserved'
				ELSE 'cancelled'
			END as postStatus,
			(SELECT COUNT(*) FROM auction_bids WHERE post_id = p.post_id) as biddersCount,
			(SELECT IFNULL(MAX(bid_amount), p.price) FROM auction_bids WHERE post_id = p.post_id) as currentPrice,
			CASE WHEN p.winner_id IS NOT NULL THEN 
				(SELECT nickname FROM members WHERE member_id = p.winner_id)
			ELSE NULL END as buyerName,
			CASE WHEN p.auction_end_time < NOW() THEN false ELSE true END as isActive
		FROM posts p
		JOIN members m ON p.member_id = m.member_id
		WHERE p.member_id = #{memberId} AND p.trade_type = 'AUCTION'
		]]>
		<if test="status != null and status != 'all'">
			<choose>
				<when test="status == 'active'">
					AND p.status = 'ON_SALE' AND p.auction_end_time &gt; NOW()
				</when>
				<when test="status == 'reserved'">
					AND p.status = 'RESERVED'
				</when>
				<when test="status == 'completed'">
					AND p.status = 'SOLD'
				</when>
				<when test="status == 'bidding'">
					AND p.auction_end_time &gt; NOW() AND p.status = 'ON_SALE'
				</when>
				<when test="status == 'cancelled'">
					AND p.auction_end_time &lt;= NOW() AND p.winner_id IS NULL
				</when>
			</choose>
		</if>
		ORDER BY p.created_at DESC
	</select>

	<!-- 일반거래 게시글만 조회 -->
	<select id="getMyGeneralPosts" resultType="map">
		<![CDATA[
		SELECT 
			p.post_id as postId,
			p.title,
			p.content as description,
			p.price,
			p.trade_type as tradeType,
			p.status,
			p.view_count as viewCount,
			p.created_at as createdAt,
			p.updated_at as updatedAt,
			m.nickname as seller,
			(SELECT CONCAT('/save/', photo_url) 
			 FROM post_photos 
			 WHERE post_id = p.post_id AND is_main = 1 
			 LIMIT 1) as image,
			'general' as type,
			CASE 
				WHEN p.status = 'ON_SALE' THEN 'active'
				WHEN p.status = 'SOLD' THEN 'completed'
				WHEN p.status = 'RESERVED' THEN 'reserved'
				ELSE 'active'
			END as postStatus,
			p.price as currentPrice
		FROM posts p
		JOIN members m ON p.member_id = m.member_id
		WHERE p.member_id = #{memberId} AND p.trade_type = 'SALE'
		]]>
		<if test="status != null and status != 'all'">
			<choose>
				<when test="status == 'active'">
					AND p.status = 'ON_SALE'
				</when>
				<when test="status == 'reserved'">
					AND p.status = 'RESERVED'
				</when>
				<when test="status == 'completed'">
					AND p.status = 'SOLD'
				</when>
			</choose>
		</if>
		ORDER BY p.created_at DESC
	</select>

	<!-- 나눔 게시글만 조회 -->
	<select id="getMyGiveawayPosts" resultType="map">
		<![CDATA[
		SELECT 
			p.post_id as postId,
			p.title,
			p.content as description,
			p.price,
			p.trade_type as tradeType,
			p.status,
			p.view_count as viewCount,
			p.created_at as createdAt,
			p.updated_at as updatedAt,
			m.nickname as seller,
			(SELECT CONCAT('/save/', photo_url) 
			 FROM post_photos 
			 WHERE post_id = p.post_id AND is_main = 1 
			 LIMIT 1) as image,
			'giveaway' as type,
			CASE 
				WHEN p.status = 'ON_SALE' THEN 'active'
				WHEN p.status = 'SOLD' THEN 'completed'
				WHEN p.status = 'RESERVED' THEN 'reserved'
				ELSE 'active'
			END as postStatus,
			'무료' as currentPrice
		FROM posts p
		JOIN members m ON p.member_id = m.member_id
		WHERE p.member_id = #{memberId} AND p.trade_type = 'SHARE'
		]]>
		<if test="status != null and status != 'all'">
			<choose>
				<when test="status == 'active'">
					AND p.status = 'ON_SALE'
				</when>
				<when test="status == 'reserved'">
					AND p.status = 'RESERVED'
				</when>
				<when test="status == 'completed'">
					AND p.status = 'SOLD'
				</when>
			</choose>
		</if>
		ORDER BY p.created_at DESC
	</select>

	<!-- 유찰 게시글만 조회 (경매에서만 발생) -->
	<select id="getMyCancelledAuctionPosts" resultType="map">
		<![CDATA[
		SELECT 
			p.post_id as postId,
			p.title,
			p.content as description,
			p.price,
			p.trade_type as tradeType,
			p.status,
			p.auction_end_time as endTime,
			p.view_count as viewCount,
			p.created_at as createdAt,
			p.updated_at as updatedAt,
			p.winner_id as winnerId,
			m.nickname as seller,
			(SELECT CONCAT('/save/', photo_url) 
			 FROM post_photos 
			 WHERE post_id = p.post_id AND is_main = 1 
			 LIMIT 1) as image,
			'auction' as type,
			'cancelled' as postStatus,
			(SELECT COUNT(*) FROM auction_bids WHERE post_id = p.post_id) as biddersCount,
			(SELECT IFNULL(MAX(bid_amount), p.price) FROM auction_bids WHERE post_id = p.post_id) as currentPrice,
			NULL as buyerName,
			false as isActive
		FROM posts p
		JOIN members m ON p.member_id = m.member_id
		WHERE p.member_id = #{memberId} 
		AND p.trade_type = 'AUCTION' 
		AND p.status = 'SOLD' 
		AND p.winner_id IS NULL
		ORDER BY p.created_at DESC
		]]>
	</select>
	
</mapper> 